linSD <- 52.24
linN <- 12
# Horsebean
horseMean <- 160.20
horseSD <- 38.63
horseN <- 10
# Calculations
df <- min(linN - 1, horseN - 1)
t <- abs(((linMean - horseMean) - 0) / sqrt((horseSD^2/horseN) + (linSD^2/linN)))
cat(t)
# Automatic
autoMean <- 16.12
autoSD <- 3.58
autoN <- 26
# Manual
manMean <- 19.85
manSD <- 4.51
manN <- 26
# Calculations
df <- min(autoN - 1, manN - 1)
t <- abs(((autoMean - manMean) - 0) / sqrt((manSD^2/manN) + (autoSD^2/autoN)))
cat(t)
p <- pt(t, df, lower.tail = F) * 2
cat(p)
# Automatic
autoMean <- 22.92
autoSD <- 5.29
autoN <- 26
# Manual
manMean <- 27.88
manSD <- 5.01
manN <- 26
# Automatic
autoMean <- 22.92
autoSD <- 5.29
autoN <- 26
# Manual
manMean <- 27.88
manSD <- 5.01
manN <- 26
# Automatic
autoMean <- 22.92
autoSD <- 5.29
autoN <- 26
# Manual
manMean <- 27.88
manSD <- 5.01
manN <- 26
# Calculations
meanDiff <- manMean - autoMean
# Automatic
autoMean <- 22.92
autoSD <- 5.29
autoN <- 26
# Manual
manMean <- 27.88
manSD <- 5.01
manN <- 26
# Calculations
meanDiff <- manMean - autoMean
t <- qt(0.01, 25)
# Automatic
autoMean <- 22.92
autoSD <- 5.29
autoN <- 26
# Manual
manMean <- 27.88
manSD <- 5.01
manN <- 26
# Calculations
meanDiff <- manMean - autoMean
t <- abs(qt(0.01, 25))
# Automatic
autoMean <- 22.92
autoSD <- 5.29
autoN <- 26
# Manual
manMean <- 27.88
manSD <- 5.01
manN <- 26
# Calculations
meanDiff <- manMean - autoMean
SE <- sqrt((autoSD^2 / autoN) + (meanSD^2  meanN))
# Automatic
autoMean <- 22.92
autoSD <- 5.29
autoN <- 26
# Manual
manMean <- 27.88
manSD <- 5.01
manN <- 26
# Calculations
meanDiff <- manMean - autoMean
SE <- sqrt((autoSD^2 / autoN) + (manSD^2  manN))
# Automatic
autoMean <- 22.92
autoSD <- 5.29
autoN <- 26
# Manual
manMean <- 27.88
manSD <- 5.01
manN <- 26
# Calculations
meanDiff <- manMean - autoMean
SE <- sqrt((autoSD^2 / autoN) + (manSD^2 / manN))
t <- abs(qt(0.01, 25))
# Automatic
autoMean <- 22.92
autoSD <- 5.29
autoN <- 26
# Manual
manMean <- 27.88
manSD <- 5.01
manN <- 26
# Calculations
meanDiff <- manMean - autoMean
SE <- sqrt((autoSD^2 / autoN) + (manSD^2 / manN))
t <- abs(qt(0.01, 25))
ME <- t * SE
# Automatic
autoMean <- 22.92
autoSD <- 5.29
autoN <- 26
# Manual
manMean <- 27.88
manSD <- 5.01
manN <- 26
# Calculations
meanDiff <- manMean - autoMean
SE <- sqrt((autoSD^2 / autoN) + (manSD^2 / manN))
t <- abs(qt(0.01, 25))
ME <- t * SE
lower <- meanDiff - ME
upper <- meanDiff + ME
cat(lower, upper)
# Automatic
autoMean <- 22.92
autoSD <- 5.29
autoN <- 26
# Manual
manMean <- 27.88
manSD <- 5.01
manN <- 26
# Calculations
meanDiff <- manMean - autoMean
SE <- sqrt((autoSD^2 / autoN) + (manSD^2 / manN))
t <- abs(qt(0.02/2, 25))
ME <- t * SE
lower <- meanDiff - ME
upper <- meanDiff + ME
cat(lower, upper)
# Automatic
oldMean <- 810
oldSD <- 117
oldN <- 28
# Manual
youngMean <- 708
youngSD <- 72
youngN <- 26
# Calculations
df <- min(oldN-1, youngN-1)
meanDiff <- oldMean - youngMean
SE <- sqrt((oldSD^2 / oldN) + (youngSD^2 / youngN))
t <- abs(qt(0.1/2, df))
ME <- t * SE
lower <- meanDiff - ME
upper <- meanDiff + ME
cat(lower, upper)
qnorm(0.1/2, 0, 1)
# Older
oldMean <- 810
oldSD <- 117
oldN <- 28
# Younger
youngMean <- 708
youngSD <- 72
youngN <- 26
# Calculations
df <- min(oldN-1, youngN-1)
meanDiff <- oldMean - youngMean
SE <- sqrt((oldSD^2 / oldN) + (youngSD^2 / youngN))
t <- abs(qt(0.1/2, df))
ME <- t * SE
lower <- meanDiff - ME
upper <- meanDiff + ME
cat(lower, upper)
# Older
oldMean <- 810
oldSD <- 117
oldN <- 28
# Younger
youngMean <- 708
youngSD <- 72
youngN <- 26
# Older
oldMean <- 810
oldSD <- 117
oldN <- 28
# Younger
youngMean <- 708
youngSD <- 72
youngN <- 26
# Calculations
df <- min(oldN - 1, youngN - 1)
t <- abs(((oldMean - youngMean) - 0) / sqrt((oldSD^2/oldN) + (youngSD^2/youngN)))
cat(t)
p <- pt(t, df, lower.tail = F) * 2
cat(p)
p < 0.1
p < 0.05
p < 0.1
0.1/2
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## Include the command to load the data here!!!!
# Automatic
autoMean <- 16.12
autoSD <- 3.58
autoN <- 26
# Manual
manMean <- 19.85
manSD <- 4.51
manN <- 26
# Calculations
df <- min(autoN - 1, manN - 1)
t <- abs(((autoMean - manMean) - 0) / sqrt((manSD^2/manN) + (autoSD^2/autoN)))
cat(t)
pnorm(0.1/2, 0, 1)
qnorm(0.1/2, 0, 1)
z <- abs(qnorm(0.1/2, 0, 1))
xbar <- 810
sd <- 117
n <- 28
lower <- xbar - (z * (sd/sqrt(n)))
upper <- xbar + (z * (sd/sqrt(n)))
cat(lower, upper)
xbar <- (65 + 77) / 2
cat(xbar)
ME <- (77 - 65) / 2
cat(ME)
t <- abs(qt(0.1/2, 24))
SD <- (ME / t) * sqrt(25)
cat(SD)
xbar <- (65 + 77) / 2
cat(xbar)
ME <- (77 - 65) / 2
cat(ME)
t <- abs(qt(0.1/2, 24))
SD <- (ME / t) * sqrt(25)
cat(SD)
IQR <- 177.8 - 163.8
lower <- 163.8 - (1.5 * IQR)
upper <- 177.8 + (1.5 * IQR)
cat(lower, upper)
SE <- 9.4 / sqrt(507)
cat(SE)
z <- abs(qnorm(0.1/2, 0, 1))
round((z * (250/25))^2)
# Automatic
autoMean <- 22.92
autoSD <- 5.29
autoN <- 26
# Manual
manMean <- 27.88
manSD <- 5.01
manN <- 26
# Calculations
meanDiff <- manMean - autoMean
SE <- sqrt((autoSD^2 / autoN) + (manSD^2 / manN))
t <- abs(qt(0.02/2, 25))
ME <- t * SE
lower <- meanDiff - ME
upper <- meanDiff + ME
cat(lower, upper)
IQR <- 177.8 - 163.8
lower <- 163.8 - (1.5 * IQR)
upper <- 177.8 + (1.5 * IQR)
cat(lower, upper)
SE <- 9.4 / sqrt(507)
cat(SE)
t <- abs(qt(0.1/2, 24))
SD <- (ME / t) * sqrt(25)
cat(SD)
z <- abs(qt(0.1/2, 27))
xbar <- 810
sd <- 117
n <- 28
lower <- xbar - (z * (sd/sqrt(n)))
upper <- xbar + (z * (sd/sqrt(n)))
cat(lower, upper)
SE <- 9.4 / sqrt(507)
cat(SE)
z <- abs(qt(0.1/2, 27))
xbar <- 810
sd <- 117
n <- 28
lower <- xbar - (z * (sd/sqrt(n)))
upper <- xbar + (z * (sd/sqrt(n)))
cat(lower, upper)
z <- abs(qt(0.1/2, 27))
xbar <- 810
sd <- 117
n <- 28
lower <- xbar - (z * (sd/sqrt(n)))
upper <- xbar + (z * (sd/sqrt(n)))
cat(lower, upper)
# Older
oldMean <- 810
oldSD <- 117
oldN <- 28
# Younger
youngMean <- 708
youngSD <- 72
youngN <- 26
# Calculations
df <- min(oldN - 1, youngN - 1)
t <- abs(((oldMean - youngMean) - 0) / sqrt((oldSD^2/oldN) + (youngSD^2/youngN)))
cat(t)
p <- pt(t, df, lower.tail = F) * 2
cat(p)
p < 0.1
# Automatic
autoMean <- 16.12
autoSD <- 3.58
autoN <- 26
# Manual
manMean <- 19.85
manSD <- 4.51
manN <- 26
# Calculations
df <- min(autoN - 1, manN - 1)
t <- abs(((autoMean - manMean) - 0) / sqrt((manSD^2/manN) + (autoSD^2/autoN)))
cat(t)
p <- pt(t, df, lower.tail = F) * 2
cat(p)
p < 0.05
p <- pt(t, df, lower.tail = F) * 2
cat(p)
p < 0.05
z <- abs(qt(0.1/2, 27))
xbar <- 810
sd <- 117
n <- 28
lower <- xbar - (z * (sd/sqrt(n)))
upper <- xbar + (z * (sd/sqrt(n)))
cat(lower, upper)
# Older
oldMean <- 810
oldSD <- 117
oldN <- 28
# Younger
youngMean <- 708
youngSD <- 72
youngN <- 26
# Calculations
df <- min(oldN - 1, youngN - 1)
t <- abs(((oldMean - youngMean) - 0) / sqrt((oldSD^2/oldN) + (youngSD^2/youngN)))
cat(t)
p <- pt(t, df, lower.tail = F) * 2
cat(p)
p < 0.1
df <- min(oldN-1, youngN-1)
meanDiff <- oldMean - youngMean
SE <- sqrt((oldSD^2 / oldN) + (youngSD^2 / youngN))
t <- abs(qt(0.1/2, df))
ME <- t * SE
lower <- meanDiff - ME
upper <- meanDiff + ME
cat(lower, upper)
z <- abs(qnorm(0.01/2, 0, 1))
round((z * (250/25))^2)
z <- abs(qnorm(0.01/2, 0, 1))
(z * (250/25))^2
z <- abs(qnorm(0.1/2, 0, 1))
(z * (250/25))^2
z <- abs(qnorm(0.01/2, 0, 1))
(z * (250/25))^2
p <- pt(t, df, lower.tail = F) * 2
cat(p)
p <- pt(t, df, lower.tail = F) * 2
cat(p)
# Automatic
autoMean <- 16.12
autoSD <- 3.58
autoN <- 26
# Manual
manMean <- 19.85
manSD <- 4.51
manN <- 26
# Calculations
df <- min(autoN - 1, manN - 1)
t <- abs(((autoMean - manMean) - 0) / sqrt((manSD^2/manN) + (autoSD^2/autoN)))
cat(t)
p <- pt(t, df, lower.tail = F) * 2
cat(p)
library(tidyverse)
setwd("/Users/armvg/Desktop/GIS/SeattleAlleyCrimes/assets")
crime <- read.csv("SPDCrime.csv")
View(crime)
# Filter out data except for 2023 entries
crime_2023 <- crime %>%
mutate(Report.DateTime = as.POSIXct(Report.DateTime, format = "%m/%d/%Y %H:%M")) %>%
filter(year(Report.DateTime) == 2023)
setwd("/Users/armvg/Desktop/GIS/SeattleAlleyCrimes/assets")
crime <- read.csv("SPDCrime.csv")
# Filter out data except for 2023 entries
crime_2023 <- crime %>%
mutate(Report.DateTime = as.POSIXct(Report.DateTime, format = "%m/%d/%Y %H:%M")) %>%
filter(year(Report.DateTime) == 2023)
crime_2023 <- crime %>%
mutate(Report.DateTime = as.POSIXct(Report.DateTime, format = "%m/%d/%Y %H:%M"))
crime_2023 <- crime %>%
mutate(Report.DateTime = as.POSIXct(Report.DateTime, format = "%m/%d/%Y %H:%M")) %>%
filter(year(Report.DateTime) == 2023)
View(crime_2023)
rm(crime_2023)
# Filter out data except for 2023 entries
crime_2023 <- crime %>%
mutate(Report.DateTime = as.POSIXct(Report.DateTime, format = "%m/%d/%Y %H:%M", tz = "UTC")) %>%
filter(year(Report.DateTime) == 2023)
library(tidyverse)
# Filter out data except for 2023 entries
crime_2023 <- crime %>%
mutate(Report.DateTime = as.POSIXct(Report.DateTime, format = "%m/%d/%Y %H:%M", tz = "UTC")) %>%
filter(year(Report.DateTime) == 2023)
install.packages("lubridate")
install.packages("lubridate")
library(tidyverse)
library(lubridate)
# Filter out data except for 2023 entries
crime_2023 <- crime %>%
mutate(Report.DateTime = as.POSIXct(Report.DateTime, format = "%m/%d/%Y %H:%M", tz = "UTC")) %>%
filter(year(Report.DateTime) == 2023)
View(crime_2023)
crime_filtered <- crime_2023 %>%
filter(Latitude != 0 | Longitude != 0)
write.csv(crime_filtered, file = "/Users/armvg/Desktop/GIS/SeattleAlleyCrimes/assets/SPDCrime2023.csv", row.names = FALSE)
library(sf)
geojson_data <- st_read("GreaterDowntownAlleys.geojson")
View(geojson_data)
rm(geojson_data)
crime_sf <- st_as_sf(crime_filtered, coords = c("Longitude", "Latitude"))
st_write(crime_sf, "/Users/armvg/Desktop/GIS/SeattleAlleyCrimes/assets/SPDCrime2023.geojson")
# Define the bounding box polygon
bbox_polygon <- st_polygon(list(cbind(c(-122.36688547657454, -122.36688547657454, -122.3007053422532, -122.3007053422532, -122.36688547657454),
c(47.62936251919575, 47.593593092415574, 47.593593092415574, 47.62936251919575, 47.62936251919575))))
# Filter points within the bounding box polygon
crime_within_bbox <- st_within(crime_sf, bbox_polygon)
# Create a new data frame with filtered points
crime_within_bbox_df <- st_sf(st_drop_geometry(crime_sf[crime_within_bbox, ]))
# Write to new GeoJSON File
st_write(crime_sf, "/Users/armvg/Desktop/GIS/SeattleAlleyCrimes/assets/SPDCrime2023.geojson")
# Write to new GeoJSON File
st_write(crime_sf, "/Users/armvg/Desktop/GIS/SeattleAlleyCrimes/assets/SPDCrime2023.geojson", append=FALSE)
# Write to new GeoJSON File
st_write(crime_within_bbox_df, "/Users/armvg/Desktop/GIS/SeattleAlleyCrimes/assets/SPDCrime2023.geojson", append=FALSE)
# Define the bounding box polygon
bbox_polygon <- st_polygon(list(cbind(c(-122.36688547657454, -122.36688547657454, -122.3007053422532, -122.3007053422532, -122.36688547657454),
c(47.62936251919575, 47.593593092415574, 47.593593092415574, 47.62936251919575, 47.62936251919575))))
# Filter points within the bounding box polygon
crime_within_bbox <- st_within(crime_sf, bbox_polygon)
# Create a new data frame with filtered points
crime_within_bbox_df <- st_sf(st_drop_geometry(crime_sf[crime_within_bbox, ]))
crime_within_bbox_df <- crime_sf[crime_within_bbox, ]
library(tidyverse)
library(lubridate)
library(sf)
# Set working directory and read in crime dataset
setwd("/Users/armvg/Desktop/GIS/SeattleAlleyCrimes/assets")
crime <- read.csv("SPDCrime.csv")
# Filter out data except for 2023 entries
crime_2023 <- crime %>%
mutate(Report.DateTime = as.POSIXct(Report.DateTime, format = "%m/%d/%Y %H:%M", tz = "UTC")) %>%
filter(year(Report.DateTime) == 2023)
# Remove rows where the latitude and longitude are 0
crime_filtered <- crime_2023 %>%
filter(Latitude != 0 | Longitude != 0)
# Create Simple Features Dataframe
crime_sf <- st_as_sf(crime_filtered, coords = c("Longitude", "Latitude"))
# Define the bounding box polygon
bbox_polygon <- st_polygon(list(cbind(c(-122.36688547657454, -122.36688547657454, -122.3007053422532, -122.3007053422532, -122.36688547657454),
c(47.62936251919575, 47.593593092415574, 47.593593092415574, 47.62936251919575, 47.62936251919575))))
# Filter points within the bounding box polygon
crime_within_bbox <- st_within(crime_sf, bbox_polygon)
# Create a new data frame with filtered points
crime_within_bbox_df <- crime_sf[as.logical(crime_within_bbox), ]
# Write to a new GeoJSON File
st_write(crime_within_bbox_df, "/Users/armvg/Desktop/GIS/SeattleAlleyCrimes/assets/SPDCrime2023.geojson")
library(tidyverse)
library(lubridate)
library(sf)
# Set working directory and read in crime dataset
setwd("/Users/armvg/Desktop/GIS/SeattleAlleyCrimes/assets")
crime <- read.csv("SPDCrime.csv")
# Filter out data except for 2023 entries
crime_2023 <- crime %>%
mutate(Report.DateTime = as.POSIXct(Report.DateTime, format = "%m/%d/%Y %H:%M", tz = "UTC")) %>%
filter(year(Report.DateTime) == 2023)
# Remove rows where the latitude and longitude are 0
crime_filtered <- crime_2023 %>%
filter(Latitude != 0 | Longitude != 0)
# Create Simple Features Dataframe
crime_sf <- st_as_sf(crime_filtered, coords = c("Longitude", "Latitude"))
# Define the bounding box polygon for alley GeoJSON file boundaries
bbox_polygon <- st_polygon(list(cbind(c(-122.36688547657454, -122.36688547657454, -122.3007053422532, -122.3007053422532, -122.36688547657454),
c(47.62936251919575, 47.593593092415574, 47.593593092415574, 47.62936251919575, 47.62936251919575))))
# Filter points within the bounding box polygon
crime_within_bbox <- st_within(crime_sf, bbox_polygon)
# Create a new data frame with filtered points
crime_within_bbox_df <- crime_sf[as.logical(crime_within_bbox), ]
# Write to a new GeoJSON File
st_write(crime_within_bbox_df, "/Users/armvg/Desktop/GIS/SeattleAlleyCrimes/assets/SPDCrime2023Filtered.geojson")
